name: Pre-release

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  create-pre-release:
    runs-on: ubuntu-latest
    name: Build and push Docker image and create a new GitHub pre-release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set environment variables
        run: |
          echo VERSION=$(cat VERSION).$GITHUB_RUN_NUMBER >> $GITHUB_ENV
          echo IMAGE_NAME=$REGISTRY/$(echo ${GITHUB_REPOSITORY,,}) >> $GITHUB_ENV
          echo COMMITED_AT=$(git show -s --format=%cI `git rev-parse HEAD`) >> $GITHUB_ENV
          echo REVISION=$(git rev-parse --short HEAD) >> $GITHUB_ENV

      - name: Collect Docker image metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.created=${{ env.COMMITED_AT }}
            org.opencontainers.image.version=v${{ env.VERSION }}
            org.opencontainers.image.maintainer=GeoWerkstatt GmbH <support@geowerkstatt.ch>
          tags: |
            type=edge

      - name: Log in to the GitHub container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner  }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
            REVISION=${{ env.REVISION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:edge
          cache-to: type=inline

      - name: Create GitHub pre-release
        uses: marvinpinto/action-automatic-releases@919008cf3f741b179569b7a6fb4d8860689ab7f0
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: v${{ env.VERSION }}
          prerelease: true
          title: ${{ env.VERSION }}

      - name: Create Jira release
        uses: GeoWerkstatt/create-jira-release@v1
        with:
          jira-project-key: 'ILICHECK'
          jira-automation-webhook: ${{ secrets.JIRA_AUTOMATION_WEBHOOK }}
          build-version: v${{ env.VERSION }}
